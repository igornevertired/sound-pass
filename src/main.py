import logging
import telebot
from telebot import types
import yaml
from logger import setup_logging


class ConfigLoader:
    @staticmethod
    def load_config(config_path):
        with open(config_path, "r", encoding="utf-8") as file:
            return yaml.safe_load(file)


class UserDataHandler:
    def __init__(self):
        self.user_data = {}

    def add_user(self, chat_id):
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}

    def update_user_step(self, chat_id, step):
        self.user_data[chat_id]["step"] = step

    def update_user_data(self, chat_id, key, value):
        self.user_data[chat_id][key] = value

    def get_user_data(self, chat_id):
        return self.user_data.get(chat_id, {})

    def delete_user(self, chat_id):
        if chat_id in self.user_data:
            del self.user_data[chat_id]


class TelegramBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_data_handler = UserDataHandler()
        self.setup_handlers()

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            self.show_main_menu(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            chat_id = call.message.chat.id

            if call.data == 'pay':
                self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
                self.user_data_handler.add_user(chat_id)
                self.user_data_handler.update_user_step(chat_id, "login")

            elif call.data == 'help':
                self.bot.send_message(chat_id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏.")

            elif call.data == 'support':
                self.bot.send_message(chat_id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç")

            elif call.data == 'back':
                self.show_main_menu(chat_id)

            elif call.data == 'paid':
                self.bot.send_message(chat_id,
                                      "üîÑ –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Spotify! üé∂")

            elif call.data == 'card':
                self.user_data_handler.update_user_data(chat_id, "payment_method", "–ö–∞—Ä—Ç–∞")
                self.send_payment_details(chat_id, "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π:\n"
                                                   "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: 4377 7237 7250 0918 \n"
                                                   "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —á–∞—Ç")

            elif call.data == 'crypto':
                self.user_data_handler.update_user_data(chat_id, "payment_method", "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞")
                self.send_payment_details(chat_id, "ü™ô –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:\n"
                                                   "–ö–æ—à–µ–ª–µ–∫ TRC20: TXmM4MpjoLweyBJa1FaLQYDaXBigWtadNi")

        @self.bot.message_handler(func=lambda message: True)
        def handle_text(message):
            chat_id = message.chat.id
            user_data = self.user_data_handler.get_user_data(chat_id)

            if user_data:
                step = user_data.get("step")

                if step == "login":
                    self.user_data_handler.update_user_data(chat_id, "login", message.text)
                    self.user_data_handler.update_user_step(chat_id, "password")
                    self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

                elif step == "password":
                    self.user_data_handler.update_user_data(chat_id, "password", message.text)
                    self.user_data_handler.update_user_step(chat_id, "payment_method")

                    markup = types.InlineKeyboardMarkup(row_width=2)
                    btn_card = types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data='card')
                    btn_crypto = types.InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto')
                    markup.add(btn_card, btn_crypto)

                    self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

    def send_payment_details(self, chat_id, details):
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
        btn_paid = types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data='paid')
        markup.add(btn_back, btn_paid)

        self.bot.send_message(chat_id, details, reply_markup=markup)

    def show_main_menu(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_pay = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='pay')
        btn_help = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
        btn_support = types.InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
        markup.add(btn_pay, btn_help, btn_support)

        self.bot.send_message(chat_id, "SoundPass Bot ‚Äî —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –º—É–∑—ã–∫–∏!\n\n"
                                       "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Spotify –∏ "
                                       "–Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ª—é–±–∏–º—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤.\n\n"
                                       "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –≤–∞—Å –æ–ø—Ü–∏—é:", reply_markup=markup)

    def run(self):
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True)


if __name__ == '__main__':
    setup_logging()

    CONFIG_PATH = "./src/configs/config.yaml"
    config = ConfigLoader.load_config(CONFIG_PATH)
    TOKEN = config['API_KEY']

    bot = TelegramBot(TOKEN)
    bot.run()