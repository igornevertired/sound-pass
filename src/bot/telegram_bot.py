import logging
from datetime import datetime, timedelta

import telebot
from telebot import types
from src.handlers.user_data_handler import UserDataHandler
from src.db.db_manager import SubscriptionModel


class TelegramBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.user_data_handler = UserDataHandler()
        self.setup_handlers()

    def get_price_by_tariff(self, tariff):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        prices = {
            'sub_3': 1090,
            'sub_6': 2390,
            'sub_12': 3490
        }
        return prices.get(tariff, 0)

    def calculate_next_pay_time(self, tariff):
        durations = {
            'sub_3': timedelta(days=90),
            'sub_6': timedelta(days=180),
            'sub_12': timedelta(days=365)
        }
        return datetime.now() + durations.get(tariff, timedelta(days=0))

    def setup_handlers(self):
        @self.bot.message_handler(commands=['start'])
        def send_welcome(message):
            self.show_main_menu(message.chat.id)

        @self.bot.callback_query_handler(func=lambda call: True)
        def callback_handler(call):
            chat_id = call.message.chat.id

            if call.data == 'pay':
                self.show_subscription_options(chat_id)

            elif call.data.startswith('sub_'):
                self.user_data_handler.add_user(chat_id)
                self.user_data_handler.update_user_data(chat_id, "subscription", call.data)
                self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
                self.user_data_handler.update_user_step(chat_id, "login")

            elif call.data == 'help':
                self.bot.send_message(chat_id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏.")

            elif call.data == 'support':
                self.bot.send_message(chat_id, "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @–≤–∞—à_–∞–∫–∫–∞—É–Ω—Ç")

            elif call.data == 'reviews':
                self.show_reviews(chat_id)

            elif call.data == 'back':
                self.show_main_menu(chat_id)

            elif call.data == 'paid':
                self.bot.send_message(chat_id,
                                      "üîÑ –ú—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Spotify! üé∂")


            elif call.data in ['card', 'crypto']:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                self.user_data_handler.update_user_data(chat_id, "payment_method", call.data)
                self.user_data_handler.update_user_step(chat_id, "payment_method")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                user_data = self.user_data_handler.get_user_data(chat_id)
                subscription_data = user_data.get("subscription")
                login = user_data.get("login")
                password = user_data.get("password")
                payment_method = call.data  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

                SubscriptionModel.create_subscription(
                    name=login,
                    password=password,
                    tariff=subscription_data,
                    payment_method=payment_method,
                    price=self.get_price_by_tariff(subscription_data),
                    created_time=datetime.now(),
                    next_pay_time=self.calculate_next_pay_time(subscription_data)
                )

                self.bot.send_message(chat_id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
                self.user_data_handler.delete_user(chat_id)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        @self.bot.message_handler(func=lambda message: True)
        def handle_text(message):
            chat_id = message.chat.id
            user_data = self.user_data_handler.get_user_data(chat_id)

            if user_data:
                step = user_data.get("step")

                if step == "login":
                    self.user_data_handler.update_user_data(chat_id, "login", message.text)
                    self.user_data_handler.update_user_step(chat_id, "password")
                    self.bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")

                elif step == "password":
                    self.user_data_handler.update_user_data(chat_id, "password", message.text)
                    self.user_data_handler.update_user_step(chat_id, "payment_method")

                    markup = types.InlineKeyboardMarkup(row_width=2)
                    btn_card = types.InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data='card')
                    btn_crypto = types.InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto')
                    markup.add(btn_card, btn_crypto)

                    self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

                elif step == "payment_method":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    subscription_data = user_data.get("subscription")
                    login = user_data.get("login")
                    password = user_data.get("password")
                    payment_method = message.text  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

                    # –ü—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    SubscriptionModel.create_subscription(
                        name=login,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–Ω –∫–∞–∫ –∏–º—è
                        password=password,
                        payment_method=payment_method,
                        tariff=subscription_data,  # –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ (sub_3, sub_6, sub_12)
                        price=self.get_price_by_tariff(subscription_data),  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                        created_time=datetime.now(),  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                        next_pay_time=self.calculate_next_pay_time(subscription_data)  # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã
                    )

                    self.user_data_handler.delete_user(chat_id)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    def show_subscription_options(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_sub_3 = types.InlineKeyboardButton("Spotify Premium 3 –º–µ—Å - 1090 —Ä—É–±", callback_data='sub_3')
        btn_sub_6 = types.InlineKeyboardButton("Spotify Premium 6 –º–µ—Å - 2390 —Ä—É–±", callback_data='sub_6')
        btn_sub_12 = types.InlineKeyboardButton("Spotify Premium 12 –º–µ—Å - 3490 —Ä—É–±", callback_data='sub_12')
        markup.add(btn_sub_3, btn_sub_6, btn_sub_12)

        self.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=markup)

    def show_reviews(self, chat_id):
        reviews_text = "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å! –ë—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.\n\n"
        reviews_text += "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n–í—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –Ω–æ –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è.\n\n"
        reviews_text += "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\n–ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ.\n\n"
        reviews_text += "‚≠êÔ∏è‚≠êÔ∏è\n–ù–µ –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.\n\n"
        reviews_text += "‚≠êÔ∏è\n–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π –æ–ø—ã—Ç.\n\n"

        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
        markup.add(btn_back)

        self.bot.send_message(chat_id, reviews_text, reply_markup=markup)

    def send_payment_details(self, chat_id, details):
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')
        btn_paid = types.InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data='paid')
        markup.add(btn_back, btn_paid)

        self.bot.send_message(chat_id, details, reply_markup=markup)

    def show_main_menu(self, chat_id):
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_pay = types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='pay')
        btn_help = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
        btn_support = types.InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
        btn_reviews = types.InlineKeyboardButton("‚≠êÔ∏è –û—Ç–∑—ã–≤—ã", callback_data='reviews')
        markup.add(btn_pay, btn_help, btn_support, btn_reviews)

        self.bot.send_message(chat_id, "SoundPass Bot ‚Äî —Ç–≤–æ–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –º—É–∑—ã–∫–∏!\n\n"
                                       "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Spotify –∏ "
                                       "–Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –ª—é–±–∏–º—ã–º–∏ —Ç—Ä–µ–∫–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤.\n\n"
                                       "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –≤–∞—Å –æ–ø—Ü–∏—è:", reply_markup=markup)

    def run(self):
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.bot.polling(none_stop=True)
